export type CanvasElement = HTMLCanvasElement | string

export interface IWebGLContextAttributes {
  readonly alpha?: boolean
  readonly antialias?: boolean
  readonly depth?: boolean
  readonly failIfMajorPerformanceCaveat?: boolean
  readonly powerPreference?: "default" | "high-performance" | "low-power"
  readonly premultipliedAlpha?: boolean
  readonly preserveDrawingBuffer?: boolean
  readonly stencil?: boolean
  readonly desynchronized?: boolean
  readonly xrCompatible?: boolean
}

export interface IUnityInstanceParameters {
  dataUrl: string
  loaderUrl: string
  frameworkUrl: string
  codeUrl: string
  streamingAssetsUrl?: string
  companyName?: string
  productName?: string
  productVersion?: string
  devicePixelRatio?: number
  matchWebGLToCanvasSize?: boolean
  webglContextAttributes?: IWebGLContextAttributes
  print?: (message: string) => void
  printError?: (message: string) => void
}

export interface IUnityConfig {
  /**
   * The url to the build json file generated by Unity. When using a relative url,
   * keep in mind this is relative from the path where your html file is served.
   * @public
   * @type {string}
   */
  readonly loaderUrl: string

  /**
   * The url to the build data file generated by Unity. When using a relative url,
   * keep in mind this is relative from the path where your html file is served.
   * @public
   * @type {string}
   */
  readonly dataUrl: string

  /**
   * The url to the framework file generated by Unity. When using a relative url,
   * keep in mind this is relative from the path where your html file is served.
   * @public
   * @type {string}
   */
  readonly frameworkUrl: string

  /**
   * The url to the unity code file generated by Unity. When using a relative url,
   * keep in mind this is relative from the path where your html file is served.
   * @public
   * @type {string}
   */
  readonly codeUrl: string

  /**
   * The url where the streaming assets can be found. When using a relative url,
   * keep in mind this is relative from the path where your html file is served.
   * @public
   * @type {string}
   */
  readonly streamingAssetsUrl?: string

  /**
   * The applications company name.
   * @public
   * @type {string}
   */
  readonly companyName?: string

  /**
   * The applications product name.
   * @public
   * @type {string}
   */
  readonly productName?: string

  /**
   * The applications product version.
   * @public
   * @type {string}
   */
  readonly productVersion?: string

  /**
   * This object allow you to configure WebGLRenderingContext creation options
   * which will be pass additional context attributes to the Unity canvas.
   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext
   * @public
   * @type {IWebGLContextAttributes}
   */
  readonly webglContextAttributes?: IWebGLContextAttributes
}

/**
 * Type declaration for the UnityInstance.
 */
export declare class UnityInstance {
  constructor()
  
  /**
   * Sends a message to the UnityInstance to invoke a public method.
   * @public
   * @param objectName the name of the game object in your Unity scene.
   * @param methodName the name of the public method on the game object.
   * @param parameter an optional parameter to pass along to the method.
   */
  public SendMessage(
    objectName: string,
    methodName: string,
    parameter?: string | number | boolean
  ): void
  
  /**
   * Enables or disabled the fullscreen mode of the UnityInstance.
   * @public
   * @param fullScreen sets the fullscreen mode.
   */
  public SetFullscreen(fullScreen: 0 | 1): void
  
  /**
   * Quits the Unity WebGL application
   * and removes it from the memory.
   * @public
   * @returns {Promise<void>} a promise whether the application did quit.
   */
  public Quit(): Promise<void>
}
